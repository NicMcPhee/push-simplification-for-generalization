

@Article{Helmuth:2015:ieeeTEC,
	author =	"Thomas Helmuth and Lee Spector and James Matheson",
	title =	"Solving Uncompromising Problems with Lexicase
	Selection",
	journal =	"IEEE Transactions on Evolutionary Computation",
	year = 	"2015",
	volume =	"19",
	number =	"5",
	pages =	"630--643",
	month =	oct,
	keywords =	"genetic algorithms, genetic programming, parent
	selection, lexicase selection, tournament selection,
	PushGP",
	ISSN = 	"1089-778X",
	URL =  	"http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=6920034",
	doi =  	"doi:10.1109/TEVC.2014.2362729",
	size = 	"14 pages",
	abstract =	"We describe a broad class of problems, called
	uncompromising problems, characterised by the
	requirement that solutions must perform optimally on
	each of many test cases. Many of the problems that have
	long motivated genetic programming research, including
	the automation of many traditional programming tasks,
	are uncompromising. We describe and analyse the
	recently proposed lexicase parent selection algorition
	and show that it can facilitate the solution of
	uncompromising problems by genetic programming. Unlike
	most traditional parent selection techniques, lexicase
	selection does not base selection on a fitness value
	that is aggregated over all test cases; rather, it
	considers test cases one at a time in random order. We
	present results comparing lexicase selection to more
	traditional parent selection methods, including
	standard tournament selection and implicit fitness
	sharing, on four uncompromising problems: finding terms
	in finite algebras, designing digital multipliers,
	counting words in files, and performing symbolic
	regression of the factorial function. We provide
	evidence that lexicase selection maintains higher
	levels of population diversity than other selection
	methods, which may partially explain its utility as a
	parent selection algorithm in the context of
	uncompromising problems.",
	notes =	"also known as \cite{6920034}",
	doi-url =	"http://dx.doi.org/10.1109/TEVC.2014.2362729",
}

@phdthesis{Helmuth:2015:dissertation,
	author = {Omitted},
	title = {Omitted for blind review},
	WAITauthor = {Thomas Helmuth},
	WAITtitle = {General Program Synthesis from Examples Using Genetic Programming with Parent Selection Based on Random Lexicographic Orderings of Test Cases},
	type = {{Ph.D.} dissertation},
	institution = {University of Massachusetts, Amherst},
	date = {September, 2015},
	year = {2015},
	WAITurl = {http://scholarworks.umass.edu/dissertations_2/465/},
}

@InProceedings{Helmuth:2015:GECCO,
  author =	"Thomas Helmuth and Lee Spector",
  title =	"General Program Synthesis Benchmark Suite",
  booktitle =	"GECCO '15: Proceedings of the 2015 on Genetic and
		 Evolutionary Computation Conference",
  year = 	"2015",
  NOeditor =	"Sara Silva and Anna I Esparcia-Alcazar and Manuel
		 Lopez-Ibanez and Sanaz Mostaghim and Jon Timmis and
		 Christine Zarges and Luis Correia and Terence Soule and
		 Mario Giacobini and Ryan Urbanowicz and Youhei Akimoto
		 and Tobias Glasmachers and Francisco {Fernandez de
		 Vega} and Amy Hoover and Pedro Larranaga and Marta Soto
		 and Carlos Cotta and Francisco B. Pereira and Julia
		 Handl and Jan Koutnik and Antonio Gaspar-Cunha and
		 Heike Trautmann and Jean-Baptiste Mouret and Sebastian
		 Risi and Ernesto Costa and Oliver Schuetze and
		 Krzysztof Krawiec and Alberto Moraglio and Julian F.
		 Miller and Pawel Widera and Stefano Cagnoni and JJ
		 Merelo and Emma Hart and Leonardo Trujillo and Marouane
		 Kessentini and Gabriela Ochoa and Francisco Chicano and
		 Carola Doerr",
  isbn13 =	"978-1-4503-3472-3",
  pages =	"1039--1046",
  keywords =	"genetic algorithms, genetic programming",
  month =	"11-15 " # jul,
  organisation = "SIGEVO",
  address =	"Madrid, Spain",
  URL =  	"http://doi.acm.org/10.1145/2739480.2754769",
  doi =  	"doi:10.1145/2739480.2754769",
  publisher =	"ACM",
  publisher_address = "New York, NY, USA",
  abstract =	"Recent interest in the development and use of
		 non-trivial benchmark problems for genetic programming
		 research has highlighted the scarcity of general
		 program synthesis (also called traditional programming)
		 benchmark problems. We present a suite of 29 general
		 program synthesis benchmark problems systematically
		 selected from sources of introductory computer science
		 programming problems. This suite is suitable for
		 experiments with any program synthesis system driven by
		 input/output examples. We present results from
		 illustrative experiments using our reference
		 implementation of the problems in the PushGP genetic
		 programming system. The results show that the problems
		 in the suite vary in difficulty and can be useful for
		 assessing the capabilities of a program synthesis
		 system.",
  notes =	"Also known as \cite{2754769} GECCO-2015 A joint
		 meeting of the twenty fourth international conference
		 on genetic algorithms (ICGA-2015) and the twentith
		 annual genetic programming conference (GP-2015)",
  doi-url =	"http://dx.doi.org/10.1145/2739480.2754769",
}

@InProceedings{Helmuth:2013:GECCOcomp,
	author =	"Thomas Helmuth and Lee Spector",
	title =	"Evolving a digital multiplier with the pushgp genetic
	programming system",
	booktitle =	"GECCO '13 Companion: Proceeding of the fifteenth
	annual conference companion on Genetic and evolutionary
	computation conference companion",
	year = 	"2013",
	TooManyeditor =	"Christian Blum and Enrique Alba and Thomas
	Bartz-Beielstein and Daniele Loiacono and Francisco
	Luna and Joern Mehnen and Gabriela Ochoa and Mike
	Preuss and Emilia Tantar and Leonardo Vanneschi",
	isbn13 =	"978-1-4503-1964-5",
	keywords =	"genetic algorithms, genetic programming",
	pages =	"1627--1634",
	month =	"6-10 " # jul,
	organisation = "SIGEVO",
	address =	"Amsterdam, The Netherlands",
	doi =  	"doi:10.1145/2464576.2466814",
	publisher =	"ACM",
	publisher_address = "New York, NY, USA",
	abstract =	"A recent article on benchmark problems for genetic
	programming suggested that researchers focus attention
	on the digital multiplier problem, also known as the
	multiple output multiplier problem, in part because it
	is scalable and in part because the requirement of
	multiple outputs presents challenges for some forms of
	genetic programming [20]. Here we demonstrate the
	application of stack-based genetic programming to the
	digital multiplier problem using the PushGP genetic
	programming system, which evolves programs expressed in
	the stack-based Push programming language. We
	demonstrate the use of output instructions and argue
	that they provide a natural mechanism for producing
	multiple outputs in a stack-based genetic programming
	context. We also show how two recent developments in
	PushGP dramatically improve the performance of the
	system on the digital multiplier problem. These
	developments are the ULTRA genetic operator, which
	produces offspring via Uniform Linear Transformation
	with Repair and Alternation [12], and lexicase
	selection, which selects parents according to
	performance on cases considered sequentially in random
	order [11]. Our results using these techniques show not
	only their utility, but also the utility of the digital
	multiplier problem as a benchmark problem for genetic
	programming research. The results also demonstrate the
	exibility of stack-based genetic programming for
	solving problems with multiple outputs and for serving
	as a platform for experimentation with new genetic
	programming techniques.",
	notes =	"Also known as \cite{2466814} Distributed at
	GECCO-2013.",
	doi-url =	"http://dx.doi.org/10.1145/2464576.2466814",
}

@InCollection{Spector:2013:GPTP,
	author =	"Lee Spector and Thomas Helmuth",
	title =	"Uniform Linear Transformation with Repair and
	Alternation in Genetic Programming",
	booktitle =	"Genetic Programming Theory and Practice XI",
	year = 	"2013",
	series =	"Genetic and Evolutionary Computation",
	NOeditor =	"Rick Riolo and Jason H. Moore and Mark Kotanchek",
	publisher =	"Springer",
	chapter =	"8",
	pages =	"137--153",
	address =	"Ann Arbor, USA",
	month =	"9-11 " # may,
	keywords =	"genetic algorithms, genetic programming, Uniform
	mutation, Uniform crossover, ULTRA, Push, PushGP, Drug
	bioavailability problem, Pagie-1 problem, Factorial
	regression, Boolean multiplexer problem",
	isbn13 =	"978-1-4939-0374-0",
	doi =  	"doi:10.1007/978-1-4939-0375-7_8",
	abstract =	"Several genetic programming researchers have argued
	for the utility of genetic operators that act
	uniformly. By act uniformly we mean two specific
	things: that the probability of an inherited program
	component being modified during inheritance is
	independent of the size and shape of the parent
	programs beyond the component in question; and that
	pairs of parents are combined in ways that allow
	arbitrary combinations of components from each parent
	to appear in the child. Uniform operators described in
	previous work have had limited utility, however,
	because of a mismatch between the relevant notions of
	uniformity and the hierarchical structure and variable
	sizes of many genetic programming representations. In
	this chapter we describe a new genetic operator, ULTRA,
	which incorporates aspects of both mutation and
	crossover and acts approximately uniformly across
	programs of variable sizes and structures. ULTRA treats
	hierarchical programs as linear sequences and includes
	a repair step to ensure that syntax constraints are
	satisfied after variation. We show that on the drug
	bioavailability and Pagie-1 benchmark problems ULTRA
	produces significant improvements both in
	problem-solving power and in program size relative to
	standard operators. Experiments with factorial
	regression and with the Boolean 6-multiplexer problem
	demonstrate that ULTRA can manipulate programs that
	make use of hierarchical structure, but also that it is
	not always beneficial. The demonstrations evolve
	programs in the Push programming language, which makes
	repair particularly simple, but versions of the
	technique should be applicable in other genetic
	programming systems as well.",
	notes =	"http://cscs.umich.edu/gptp-workshops/ Part of
	\cite{Riolo:2013:GPTP} published after the workshop in
	2013",
	doi-url =	"http://dx.doi.org/10.1007/978-1-4939-0375-7_8",
}

@InProceedings{Spector:2012:GECCOcompANEW,
	author =	"Lee Spector",
	title =	"Assessment of Problem Modality by Differential
	Performance of Lexicase Selection in Genetic
	Programming: {A} Preliminary Report",
	booktitle =	"1st workshop on Understanding Problems (GECCO-UP)",
	year = 	"2012",
	NOeditor =	"Kent McClymont and Ed Keedwell",
	isbn13 =	"978-1-4503-1178-6",
	keywords =	"genetic algorithms, genetic programming, modal
	problems, selection, lexicase selection, problem
	metrics, modality",
	pages =	"401--408",
	month =	"7-11 " # jul,
	organisation = "SIGEVO",
	address =	"Philadelphia, Pennsylvania, USA",
	NOURL =  	"http://hampshire.edu/lspector/pubs/wk09p4-spector.pdf",
	doi =  	"doi:10.1145/2330784.2330846",
	publisher =	"ACM",
	publisher_address = "New York, NY, USA",
	size = 	"8 pages",
	abstract =	"Many potential target problems for genetic programming
	are modal in the sense that qualitatively different
	modes of response are required for inputs from
	different regions of the problem's domain. This paper
	presents a new approach to solving modal problems with
	genetic programming, using a simple and novel parent
	selection method called lexicase selection. It then
	shows how the differential performance of genetic
	programming with and without lexicase selection can be
	used to provide a measure of problem modality, and it
	argues that defining such a measure in this way is not
	as methodologically problematic as it may initially
	appear. The modality measure is illustrated through the
	analysis of genetic programming runs on a simple modal
	symbolic regression problem. This is a preliminary
	report that is intended in part to stimulate discussion
	on the significance of modal problems, methods for
	solving them, and methods for measuring the modality of
	problems. Although the core concepts in this paper are
	presented in the context of genetic programming, they
	are also relevant to applications of other forms of
	evolutionary computation to modal problems.",
	notes =	"p403 'allowing the high-performing individual [on any
	test case] to contribute to the following generation,
	regardless of [its] performance on other cases.' p405
	'with population size 10000 the overall cost of
	producing offspring using lexicase selection can exceed
	that of using ordinary tournaments by between one and
	two orders of magnitude'. (why?) Section 5: integer
	symbolic regresions with one, two or three 'modes'.
	Clojure lexicase.clj
	https://gist.github.com/lspector/2320883 Also known as
	\cite{2330846} Distributed at GECCO-2012. ACM Order
	Number 910122.",
	doi-url =	"http://dx.doi.org/10.1145/2330784.2330846",
}

@InProceedings{McKay:2000:GECCO,
	author =	"McKay, Robert I.",
	title =	"Fitness Sharing in Genetic Programming",
	pages =	"435--442",
	year = 	"2000",
	publisher =	"Morgan Kaufmann",
	booktitle =	"Proceedings of the Genetic and Evolutionary
	Computation Conference (GECCO-2000)",
	NOeditor =	"Darrell Whitley and David Goldberg and Erick Cantu-Paz
	and Lee Spector and Ian Parmee and Hans-Georg Beyer",
	address =	"Las Vegas, Nevada, USA",
	publisher_address = "San Francisco, CA 94104, USA",
	month =	"10-12 " # jul,
	keywords =	"genetic algorithms, genetic programming",
	ISBN = 	"1-55860-708-0",
	URL =  	"http://www.cs.bham.ac.uk/~wbl/biblio/gecco2000/GP256.pdf",
	URL =  	"http://www.cs.bham.ac.uk/~wbl/biblio/gecco2000/GP256.ps",
	notes =	"A joint meeting of the ninth International Conference
	on Genetic Algorithms (ICGA-2000) and the fifth Annual
	Genetic Programming Conference (GP-2000) Part of
	\cite{whitley:2000:GECCO}",
}


@Article{spector:2002:GPEM,
	author =       "Lee Spector and Alan Robinson",
	title =        "Genetic Programming and Autoconstructive Evolution
	with the Push Programming Language",
	journal =      "Genetic Programming and Evolvable Machines",
	year =         "2002",
	volume =       "3",
	number =       "1",
	pages =        "7--40",
	month =        mar,
	keywords =     "genetic algorithms, genetic programming, artificial
	life, modularity, programming languages,
	self-adaptation",
	ISSN =         "1389-2576",
	URL =          "http://hampshire.edu/lspector/pubs/push-gpem-final.pdf",
	doi =          "doi:10.1023/A:1014538503543",
	abstract =     "Push is a programming language designed for the
	expression of evolving programs within an evolutionary
	computation system. This article describes Push and
	illustrates some of the opportunities that it presents
	for evolutionary computation. Two evolutionary
	computation systems, PushGP and Pushpop, are described
	in detail. PushGP is a genetic programming system that
	evolves Push programs to solve computational problems.
	Pushpop, an ?autoconstructive evolution? system, also
	evolves Push programs but does so while simultaneously
	evolving its own evolutionary mechanisms.",
	notes =        "Article ID: 395988",
}

@InProceedings{1068292,
	author =       "Lee Spector and Jon Klein and Maarten Keijzer",
	title =        "The {Push3} execution stack and the evolution of
	control",
	booktitle =    "{GECCO 2005}: Proceedings of the 2005 conference on
	Genetic and evolutionary computation",
	year =         "2005",
	ISBN =         "1-59593-010-8",
	pages =        "1689--1696",
	address =      "Washington DC, USA",
	URL =          "http://www.cs.bham.ac.uk/~wbl/biblio/gecco2005/docs/p1689.pdf",
	doi =          "doi:10.1145/1068009.1068292",
	publisher =    "ACM Press",
	publisher_address = "New York, NY, 10286-1405, USA",
	organisation = "ACM SIGEVO (formerly ISGEC)",
	keywords =     "genetic algorithms, genetic programming, combinators,
	experimentation, exponentiation, factorial, Fibonacci
	sequence, iteration, languages, parity, push,
	recursion, reversing a list, sorting, stack-based
	genetic programming",
	abstract =     "One of Push's attractive features in this context is
	its transparent support for the expression and
	evolution of modular architectures and complex control
	structures, achieved through explicit code
	self-manipulation. The latest version of Push, Push3,
	enhances this feature by permitting explicit
	manipulation of an execution stack that contains the
	expressions that are queued for execution in the
	interpreter. presents a series of examples in which
	Push3 was used with a simple genetic programming system
	(PushGP) to evolve programs with non-trivial control
	structures.",
	notes =        "GECCO-2005 A joint meeting of the fourteenth
	international conference on genetic algorithms
	(ICGA-2005) and the tenth annual genetic programming
	conference (GP-2005).
	
	ACM Order Number 910052
	
	Cited by \cite{eurogp06:AgapitosLucas}
	
	EXEC stack. Combinators. Reentrant p1691 'the
	re-entrant interpreter allows for the controlled
	execution of a particular number of instructions per
	time-step.' Reversing a list. Factorial. Fibonacci.
	Parity. Powers of two, integer exponentiation
	Expt(2,n). Sorting a list.",
}

@InProceedings{spector2:2001:gecco,
  title =	"Autoconstructive Evolution: Push, Push{GP}, and
		 Pushpop",
  author =	"Lee Spector",
  pages =	"137--146",
  year = 	"2001",
  publisher =	"Morgan Kaufmann",
  booktitle =	"Proceedings of the Genetic and Evolutionary
		 Computation Conference (GECCO-2001)",
  NOeditor =	"Lee Spector and Erik D. Goodman and Annie Wu and W. B.
		 Langdon and Hans-Michael Voigt and Mitsuo Gen and
		 Sandip Sen and Marco Dorigo and Shahram Pezeshk and Max
		 H. Garzon and Edmund Burke",
  address =	"San Francisco, California, USA",
  publisher_address = "San Francisco, CA 94104, USA",
  month =	"7-11 " # jul,
  keywords =	"genetic algorithms, genetic programming,
		 self-replication, stack-based genetic programming,
		 ontogenetic programming, adaptive evolutionary
		 computation, recursion, modularity",
  ISBN = 	"1-55860-774-9",
  URL =  	"http://hampshire.edu/lspector/pubs/ace.pdf",
  URL =  	"http://citeseer.ist.psu.edu/445431.html",
  URL =  	"http://www.cs.bham.ac.uk/~wbl/biblio/gecco2001/d01.pdf",
  abstract =	"This paper is a preliminary report on autoconstructive
		 evolution, a framework for evolutionary computation in
		 which the machinery of reproduction and diversification
		 (and thereby the machinery of evolution) evolves within
		 the individuals of an evolving population of problem
		 solvers. Autoconstructive evolution is illustrated with
		 Pushpop, an evolving population of programs expressed
		 in the Push programming language. The Push programming
		 language can also be used in a more traditional genetic
		 programming framework and may have unique benefits when
		 so employed; the PushGP system, which uses traditional
		 genetic programming techniques to evolve Push programs,
		 is also described.",
  notes =	"GECCO-2001 A joint meeting of the tenth International
		 Conference on Genetic Algorithms (ICGA-2001) and the
		 sixth Annual Genetic Programming Conference (GP-2001)
		 Part of \cite{spector:2001:GECCO} Slides at the 2001
		 Genetic and Evolutionary Computation Conference
		 (GECCO-2001).
		 http://hampshire.edu/lspector/ACE-GECCO.pdf",
}

%% Simplification in Push

@MastersThesis{Robinson:2001:GPtieus,
  author =	"Alan Robinson",
  title =	"Genetic Programming: Theory, Implementation, and the
		 Evolution of Unconstrained Solutions",
  school =	"Hampshire College",
  year = 	"2001",
  type = 	"Division III thesis",
  month =	may,
  keywords =	"genetic algorithms, genetic programming, PushGP, LJGP
		 Linear Java GP, Lawnmower problem, Grazer problem",
  URL =  	"http://hampshire.edu/lspector/robinson-div3.pdf",
  URL =  	"http://citeseer.ist.psu.edu/498673.html",
  size = 	"127 pages",
  abstract =	"Part I: Background 1 INTRODUCTION 1.1 BACKGROUND ?
		 AUTOMATIC PROGRAMMING 1.2 THIS PROJECT 1.3 SUMMARY OF
		 CHAPTERS 2 GENETIC PROGRAMMING REVIEW Part II: PushGP 3
		 THE PUSH LANGUAGE & PUSHGP 4 PUSHGP COMPARED TO GP2
		 WITH ADFS 4.1 CAN A MORE FLEXIBLE SYSTEM PERFORM AS
		 WELL? 4.2 THE COMPUTATIONAL EFFORT METRIC 4.3 MEASURING
		 MODULARITY 4.4 SOLVING SYMBOLIC REGRESSION 4.5 EVEN
		 PARITY AS A GP BENCHMARK 4.6 SOLVING EVEN-FOUR-PARITY
		 USING PUSHGP AND STACK INPUT 4.7 EVEN-FOUR-PARITY WITH
		 INPUT FUNCTIONS 4.8 EVEN-SIX-PARITY 4.9 SOLVING
		 EVEN-N-PARITY 4.10 CONCLUSIONS DRAWN FROM THIS CHAPTER
		 5 VARIATIONS IN GENETIC OPERATORS 5.1 PERFORMANCE OF
		 BASE PUSHGP OPERATORS 5.2 VARIATIONS IN CROSSOVER 5.3
		 VARIATIONS IN MUTATION 5.4 EMPIRICAL TESTS WITH NEW
		 OPERATORS 5.5 CONCLUSIONS DRAWN FROM THESE RUNS 6
		 NEWGROUND ? EVOLVING FACTORIAL Part III: LJGP 7 LINEAR
		 CODED GENETIC PROGRAMMING IN JAVA 7.4 DISTRIBUTED
		 PROCESSING 8 LJGP USER?S GUIDE 8.1 ENCODING A PROBLEM
		 8.2 LJGP PACKAGES AND CLASSES OVERVIEW 8.3 VCPU
		 PROGRAMS 9 LJGP APPLIED 9.1 LAWNMOWER PILOT STUDY 9.2
		 PROBLEM DESCRIPTION 9.3 THE GENETIC MAKEUP OF AN
		 INDIVIDUAL 9.4 THE MECHANICS OF EVOLUTION 9.5 PILOT
		 RUNS OF THE LAWNMOWER PROBLEM 9.6 GRAZER PILOT STUDY
		 9.7 CONCLUSION TO LJGP APPLIED Conclusion APPENDIX A.
		 COMPUTATIONAL EFFORT ? LISP CODE APPENDIX B. GENETIC
		 PROGRAMMING SYSTEMS IN JAVA APPENDIX C. LJGP/JAVA-VM
		 BENCHMARKS",
}

@InProceedings{Spector:2014:GECCOcomp,
  author =	"Lee Spector and Thomas Helmuth",
  title =	"Effective simplification of evolved push programs
		 using a simple, stochastic hill-climber",
  booktitle =	"GECCO Comp '14: Proceedings of the 2014 conference
		 companion on Genetic and evolutionary computation
		 companion",
  year = 	"2014",
  NOeditor =	"Christian Igel and Dirk V. Arnold and Christian Gagne
		 and Elena Popovici and Anne Auger and Jaume Bacardit
		 and Dimo Brockhoff and Stefano Cagnoni and Kalyanmoy
		 Deb and Benjamin Doerr and James Foster and Tobias
		 Glasmachers and Emma Hart and Malcolm I. Heywood and
		 Hitoshi Iba and Christian Jacob and Thomas Jansen and
		 Yaochu Jin and Marouane Kessentini and Joshua D.
		 Knowles and William B. Langdon and Pedro Larranaga and
		 Sean Luke and Gabriel Luque and John A. W. McCall and
		 Marco A. {Montes de Oca} and Alison Motsinger-Reif and
		 Yew Soon Ong and Michael Palmer and Konstantinos E.
		 Parsopoulos and Guenther Raidl and Sebastian Risi and
		 Guenther Ruhe and Tom Schaul and Thomas Schmickl and
		 Bernhard Sendhoff and Kenneth O. Stanley and Thomas
		 Stuetzle and Dirk Thierens and Julian Togelius and
		 Carsten Witt and Christine Zarges",
  isbn13 =	"978-1-4503-2881-4",
  keywords =	"genetic algorithms, genetic programming: Poster",
  pages =	"147--148",
  month =	"12-16 " # jul,
  organisation = "SIGEVO",
  address =	"Vancouver, BC, Canada",
  URL =  	"http://doi.acm.org/10.1145/2598394.2598414",
  doi =  	"doi:10.1145/2598394.2598414",
  publisher =	"ACM",
  publisher_address = "New York, NY, USA",
  abstract =	"Genetic programming systems often produce programs
		 that include unnecessary code. This is undesirable for
		 several reasons, including the burdens that
		 overly-large programs put on end-users for program
		 interpretation and maintenance. The problem is
		 exacerbated by recently developed techniques, such as
		 genetic programming with geometric semantic crossover,
		 that tend to produce enormous programs. Methods for
		 automatically simplifying evolved programs are
		 therefore of interest, but automatic simplification is
		 non-trivial in the context of traditional program
		 representations with unconstrained function sets. Here
		 we show how evolved programs expressed in the
		 stack-based Push programming language can be
		 automatically and reliably simplified using a simple,
		 stochastic hill-climber. We demonstrate and
		 quantitatively characterise this simplification process
		 on programs evolved to solve four non-trivial genetic
		 programming problems with qualitatively different
		 function sets.",
  notes =	"Also known as \cite{2598414} Distributed at
		 GECCO-2014.",
  doi-url =	"http://dx.doi.org/10.1145/2598394.2598414",
}

@InProceedings{Zhan:2014:GECCOcomp,
  author =	"Haoxi Zhan",
  title =	"A quantitative analysis of the simplification genetic
		 operator",
  booktitle =	"GECCO 2014 student workshop",
  year = 	"2014",
  editor =	"Tea Tusar and Boris Naujoks",
  isbn13 =	"978-1-4503-2881-4",
  keywords =	"genetic algorithms, genetic programming",
  pages =	"1077--1080",
  month =	"12-16 " # jul,
  organisation = "SIGEVO",
  address =	"Vancouver, BC, Canada",
  URL =  	"http://doi.acm.org/10.1145/2598394.2605684",
  doi =  	"doi:10.1145/2598394.2605684",
  publisher =	"ACM",
  publisher_address = "New York, NY, USA",
  abstract =	"The simplification function was introduced to PushGP
		 as a tool to reduce the sizes of evolved programs in
		 final reports. While previous work suggests that
		 simplification could reduce the sizes significantly,
		 nothing has been done to study its impacts on the
		 evolution of Push programs. In this paper, we show the
		 impact of simplification as a genetic operator. By
		 conducting test runs on the U.S. change problem, we
		 show that using simplification operator with PushGP,
		 lexicase selection and ULTRA could increase the
		 possibility to find solutions in the short term while
		 it might remove some useful genetic materials for the
		 long term.",
  notes =	"Clojush Also known as \cite{2605684} Distributed at
		 GECCO-2014.",
  doi-url =	"http://dx.doi.org/10.1145/2598394.2605684",
}



%% Simplification in GP

@InProceedings{Kinzett:2010:cec,
  author =	"David Kinzett and Mengjie Zhang and Mark Johnston",
  title =	"Investigation of simplification threshold and noise
		 level of input data in numerical simplification of
		 genetic programs",
  booktitle =	"IEEE Congress on Evolutionary Computation (CEC 2010)",
  year = 	"2010",
  address =	"Barcelona, Spain",
  month =	"18-23 " # jul,
  publisher =	"IEEE Press",
  keywords =	"genetic algorithms, genetic programming",
  isbn13 =	"978-1-4244-6910-9",
  abstract =	"In tree based Genetic Programming (GP) there is a
		 tendency for program sizes to increase as the run
		 proceeds without a corresponding improvement in
		 fitness. This increases resource usage, both memory and
		 CPU time, and may result in over-fitting the training
		 data. Numerical simplification is a method for removing
		 redundant code from the program trees as the run
		 proceeds. Compared with the canonical genetic
		 programming method, numerical simplification can
		 generate much smaller programs, use much shorter
		 evolutionary training times and achieve comparable
		 effectiveness performance. A key parameter of this
		 method is the simplification threshold. This paper
		 examines whether there exists any relationship between
		 the noise level in the input data and the optimum value
		 for the simplification threshold and, if it exists,
		 what that relationship is. Our results suggest that
		 there is a relationship between the optimum value of
		 the simplification threshold and the level of noise in
		 the input data and that a lower bound for the optimum
		 simplification threshold is equal to the noise level
		 and an upper bound is five times the noise level.",
  doi =  	"doi:10.1109/CEC.2010.5586181",
  notes =	"WCCI 2010. Also known as \cite{5586181}",
  doi-url =	"http://dx.doi.org/10.1109/CEC.2010.5586181",
}

@InProceedings{Forstenlechner:2017:eurogp,
  author =	"Stefan Forstenlechner and David Fagan and Miguel Nicolau and Michael O'Neill",
  title =	"A Grammar Design Pattern for Arbitrary
 Program Synthesis Problems in Genetic
 Programming",
  booktitle =	"20th European Conference on Genetic Programming",
  year = 	"2017",
  NOeditor =	"",
  pages = "In press"
}

@InProceedings{Helmuth:2015:GPTP,
  author =	"Thomas Helmuth and Nicholas Freitag McPhee and Lee
		 Spector",
  title =	"Lexicase Selection For Program Synthesis: {A}
		 Diversity Analysis",
  booktitle =	"Genetic Programming Theory and Practice XIII",
  year = 	"2015",
  NOeditor =	"Rick Riolo and William P. Worzel and M. Kotanchek and
		 A. Kordon",
  series =	"Genetic and Evolutionary Computation",
  address =	"Ann Arbor, USA",
  month =	may,
  publisher =	"Springer",
  keywords =	"genetic algorithms, genetic programming, Lexicase
		 selection, diversity, tournament selection, implicit
		 fitness sharing",
  isbn13 =	"978-3-319-34223-8",
  URL =  	"http://cs.wlu.edu/~helmuth/Pubs/2015-GPTP-lexicase-diversity-analysis.pdf",
  URL =  	"http://www.springer.com/us/book/9783319342214",
  doi =  	"doi:10.1007/978-3-319-34223-8",
  size = 	"16 pages",
  abstract =	"Lexicase selection is a selection method for
		 evolutionary computation in which individuals are
		 selected by filtering the population according to
		 performance on test cases, considered in random order.
		 When used as the parent selection method in genetic
		 programming, lexicase selection has been shown to
		 provide significant improvements in problem-solving
		 power. In this chapter we investigate the reasons for
		 the success of lexicase selection, focusing on measures
		 of population diversity. We present data from eight
		 program synthesis problems and compare lexicase
		 selection to tournament selection and selection based
		 on implicit fitness sharing. We conclude that lexicase
		 selection does indeed produce more diverse populations,
		 which helps to explain the utility of lexicase
		 selection for program synthesis.",
  notes =	"Replace Space With Newline, Syllables, String Lengths
		 Backwards, Negative To Zero, Double Letters, Scrabble
		 Score, Checksum, Count Odds. Clojush PushGP. IFS
		 \cite{McKay:2000:GECCO} agglomerative hierarchical
		 clustering agnes.R not helpful??
		 http://cscs.umich.edu/gptp-workshops/ Part of
		 \cite{Riolo:2015:GPTP} Published after the workshop in
		 2016",
  doi-url =	"http://dx.doi.org/10.1007/978-3-319-34223-8",
}

@InProceedings{Helmuth:2016:GECCO,
  author =	"Thomas Helmuth and Nicholas Freitag McPhee and Lee
		 Spector",
  title =	"The Impact of Hyperselection on Lexicase Selection",
  booktitle =	"GECCO '16: Proceedings of the 2016 on Genetic and
		 Evolutionary Computation Conference",
  year = 	"2016",
  editor =	"Tobias Friedrich",
  pages =	"717--724",
  notes = 	"Nominated for best paper",
  keywords =	"genetic algorithms, genetic programming",
  month =	"20-24 " # jul,
  organisation = "SIGEVO",
  address =	"Denver, USA",
  publisher =	"ACM",
  publisher_address = "New York, NY, USA",
  isbn13 =	"978-1-4503-4206-3",
  doi =  	"doi:10.1145/2908812.2908851",
  abstract =	"Lexicase selection is a parent selection method that
		 has been shown to improve the problem solving power of
		 genetic programming over a range of problems. Previous
		 work has shown that it can also produce hyperselection
		 events, in which a single individual is selected many
		 more times than other individuals. Here we investigate
		 the role that hyperselection plays in the
		 problem-solving performance of lexicase selection. We
		 run genetic programming on a set of program synthesis
		 benchmark problems using lexicase and tournament
		 selection, confirming that hyperselection occurs
		 significantly more often and more drastically with
		 lexicase selection, which also performs significantly
		 better. We then show results from an experiment
		 indicating that hyperselection is not integral to the
		 problem-solving performance or diversity maintenance
		 observed when using lexicase selection. We conclude
		 that the power of lexicase selection stems from the
		 collection of individuals that it selects, not from the
		 unusual frequencies with which it sometimes selects
		 them.",
  notes =	"Washington and Lee University, University of Minnesota
		 Morris, Hampshire College GECCO-2016 A Recombination of
		 the 25th International Conference on Genetic Algorithms
		 (ICGA-2016) and the 21st Annual Genetic Programming
		 Conference (GP-2016)",
  doi-url =	"http://dx.doi.org/10.1145/2908812.2908851",
}

@inproceedings{McPhee:2016:GPTP,
  author = {Nicholas Freitag McPhee and Mitchell Finzel and Maggie M. Casale and Thomas Helmuth and Lee Spector},
  title = {A detailed analysis of a {PushGP} run},
  booktitle = {Genetic Programming Theory and Practice XIV},
  year = {2016},
  series = {Genetic and Evolutionary Computation},
  address = {Ann Arbor, USA},
  month = may,
  publisher = {Springer},
  size = {16 pages}
}

@inproceedings{Helmuth:2016:GPTP,
  author = {Thomas Helmuth and Lee Spector and Nicholas Freitag McPhee and Saul Shanabrook},
  title = {Linear Genomes for Structured Programs},
  booktitle = {Genetic Programming Theory and Practice XIV},
  year = {2016},
  series = {Genetic and Evolutionary Computation},
  address = {Ann Arbor, USA},
  month = may,
  publisher = {Springer},
  size = {16 pages}
}

@book{hollander1999nonparametric,
  title={Nonparametric Statistical Methods},
  author={Hollander, M. and Wolfe, D.A.},
  isbn={9780471190455},
  lccn={98003314},
  series={Wiley Series in Probability and Statistics},
  NOurl={http://books.google.com/books?id=RJAQAQAAIAAJ},
  year={1999},
  publisher={Wiley}
}

@article{silva2012operator,
	title={Operator equalisation for bloat free genetic programming and a survey of bloat control methods},
	author={Silva, Sara and Dignum, Stephen and Vanneschi, Leonardo},
	journal={Genetic Programming and Evolvable Machines},
	volume={13},
	number={2},
	pages={197--238},
	year={2012},
	publisher={Springer}
}

@article{zhang1995balancing,
	title={Balancing accuracy and parsimony in genetic programming},
	author={Zhang, Byoung-Tak and M{\"u}hlenbein, Heinz},
	journal={Evolutionary Computation},
	volume={3},
	number={1},
	pages={17--38},
	year={1995},
	publisher={MIT Press}
}

@article{iba1994genetic,
	title={Genetic programming using a minimum description length principle},
	author={Iba, Hitoshi and De Garis, Hugo and Sato, Taisuke},
	journal={Advances in genetic programming},
	volume={1},
	pages={265--284},
	year={1994}
}

@Book{poli08:fieldguide,
	author =       "Riccardo Poli and William B. Langdon and 
	Nicholas Freitag McPhee",
	title =        "A field guide to genetic programming",
	publisher =    "Published via \texttt{http://lulu.com} and freely
	available at
	\texttt{http://www.gp-field-guide.org.uk}",
	year =         "2008",
	note =         "(With contributions by J. R. Koza)",
	URL =          "http://www.gp-field-guide.org.uk"
}

@Book{koza:book,
  author =	"John R. Koza",
  title =	"Genetic Programming: On the Programming of Computers
		 by Means of Natural Selection",
  year = 	"1992",
  publisher =	"MIT Press",
  address =	"Cambridge, MA, USA",
  keywords =	"genetic algorithms, genetic programming, text book",
  ISBN = 	"0-262-11170-5",
  URL =  	"http://mitpress.mit.edu/books/genetic-programming",
  abstract =	"Overview Genetic programming may be more powerful than
		 neural networks and other machine learning techniques,
		 able to solve problems in a wider range of disciplines.
		 In this ground-breaking book, John Koza shows how this
		 remarkable paradigm works and provides substantial
		 empirical evidence that solutions to a great variety of
		 problems from many different fields can be found by
		 genetically breeding populations of computer programs.
		 Genetic Programming contains a great many worked
		 examples and includes a sample computer code that will
		 allow readers to run their own programs. In getting
		 computers to solve problems without being explicitly
		 programmed, Koza stresses two points: that seemingly
		 different problems from a variety of fields can be
		 reformulated as problems of program induction, and that
		 the recently developed genetic programming paradigm
		 provides a way to search the space of possible computer
		 programs for a highly fit individual computer program
		 to solve the problems of program induction. Good
		 programs are found by evolving them in a computer
		 against a fitness measure instead of by sitting down
		 and writing them. John R. Koza is Consulting Associate
		 Professor in the Computer Science Department at
		 Stanford University. Endorsements The research reported
		 in this book is a tour de force. For the first time,
		 since the idea was bandied about in the 1940s and early
		 1950s, we have a non-trivial, nontailored set of
		 examples of automatic programming. -- John Holland",
}

@InProceedings{Castelli:2010:cec,
  author =	"Mauro Castelli and Luca Manzoni and Sara Silva and
		 Leonardo Vanneschi",
  title =	"A comparison of the generalization ability of
		 different genetic programming frameworks",
  booktitle =	"IEEE Congress on Evolutionary Computation (CEC 2010)",
  year = 	"2010",
  address =	"Barcelona, Spain",
  month =	"18-23 " # jul,
  publisher =	"IEEE Press",
  keywords =	"genetic algorithms, genetic programming",
  isbn13 =	"978-1-4244-6910-9",
  abstract =	"Generalisation is an important issue in machine
		 learning. In fact, in several applications good results
		 over training data are not as important as good results
		 over unseen data. While this problem was deeply studied
		 in other machine learning techniques, it has become an
		 important issue for genetic programming only in the
		 last few years. In this paper we compare the
		 generalization ability of several different genetic
		 programming frameworks, including some variants of
		 multi-objective genetic programming and operator
		 equalisation, a recently defined bloat free genetic
		 programming system. The test problem used is a hard
		 regression real-life application in the field of drug
		 discovery and development, characterised by a high
		 number of features and where the generalisation ability
		 of the proposed solutions is a crucial issue. The
		 results we obtained show that, at least for the
		 considered problem, multi-optimization is effective in
		 improving genetic programming generalization ability,
		 outperforming all the other methods on test data.",
  doi =  	"doi:10.1109/CEC.2010.5585925",
  notes =	"WCCI 2010. Also known as \cite{5585925}",
  doi-url =	"http://dx.doi.org/10.1109/CEC.2010.5585925",
}

@InProceedings{Goncalves:2015:EuroGP,
  author =	"Ivo Goncalves and Sara Silva and Carlos M. Fonseca",
  title =	"On the Generalization Ability of Geometric Semantic
		 Genetic Programming",
  booktitle =	"18th European Conference on Genetic Programming",
  year = 	"2015",
  NOeditor =	"Penousal Machado and Malcolm I. Heywood and James
		 McDermott and Mauro Castelli and Pablo Garcia-Sanchez
		 and Paolo Burelli and Sebastian Risi and Kevin Sim",
  series =	"LNCS",
  volume =	"9025",
  publisher =	"Springer",
  pages =	"41--52",
  address =	"Copenhagen",
  month =	"8-10 " # apr,
  organisation = "EvoStar",
  keywords =	"genetic algorithms, genetic programming, Geometric
		 semantic genetic programming, Generalisation,
		 Overfitting, Pharmacokinetics, Drug discovery",
  isbn13 =	"978-3-319-16500-4",
  doi =  	"doi:10.1007/978-3-319-16501-1_4",
  abstract =	"Geometric Semantic Genetic Programming (GSGP) is a
		 recently proposed form of Genetic Programming (GP) that
		 searches directly the space of the underlying semantics
		 of the programs. The fitness landscape seen by the GSGP
		 variation operators is unimodal with a linear slope by
		 construction and, consequently, easy to search. Despite
		 this advantage, the offspring produced by these
		 operators grow very quickly. A new implementation of
		 the same operators was proposed that computes the
		 semantics of the offspring without having to explicitly
		 build their syntax. This allowed GSGP to be used for
		 the first time in real-life multidimensional datasets.
		 GSGP presented a surprisingly good generalisation
		 ability, which was justified by some properties of the
		 geometric semantic operators. In this paper, we show
		 that the good generalization ability of GSGP was the
		 result of a small implementation deviation from the
		 original formulation of the mutation operator, and that
		 without it the generalization results would be
		 significantly worse. We explain the reason for this
		 difference, and then we propose two variants of the
		 geometric semantic mutation that deterministically and
		 optimally adapt the mutation step. They reveal to be
		 more efficient in learning the training data, and they
		 also achieve a competitive generalization in only a
		 single operator application. This provides a
		 competitive alternative when performing semantic
		 search, particularly since they produce small
		 individuals and compute fast.",
  notes =	"Nominated for EuroGP 2015 Best Paper. Part of
		 \cite{Machado:2015:GP} EuroGP'2015 held in conjunction
		 with EvoCOP2015, EvoMusArt2015 and
		 EvoApplications2015",
  doi-url =	"http://dx.doi.org/10.1007/978-3-319-16501-1_4",
}

@InProceedings{DBLP:conf/gecco/VanneschiG09,
  author =	"Leonardo Vanneschi and Steven Gustafson",
  title =	"Using crossover based similarity measure to improve
		 genetic programming generalization ability",
  booktitle =	"GECCO '09: Proceedings of the 11th Annual conference
		 on Genetic and evolutionary computation",
  year = 	"2009",
  NOeditor =	"Guenther Raidl and Franz Rothlauf and Giovanni
		 Squillero and Rolf Drechsler and Thomas Stuetzle and
		 Mauro Birattari and Clare Bates Congdon and Martin
		 Middendorf and Christian Blum and Carlos Cotta and
		 Peter Bosman and Joern Grahl and Joshua Knowles and
		 David Corne and Hans-Georg Beyer and Ken Stanley and
		 Julian F. Miller and Jano {van Hemert} and Tom Lenaerts
		 and Marc Ebner and Jaume Bacardit and Michael O'Neill
		 and Massimiliano {Di Penta} and Benjamin Doerr and
		 Thomas Jansen and Riccardo Poli and Enrique Alba",
  pages =	"1139--1146",
  address =	"Montreal",
  publisher =	"ACM",
  publisher_address = "New York, NY, USA",
  month =	"8-12 " # jul,
  organisation = "SigEvo",
  keywords =	"genetic algorithms, genetic programming",
  isbn13 =	"978-1-60558-325-9",
  bibsource =	"DBLP, http://dblp.uni-trier.de",
  doi =  	"doi:10.1145/1569901.1570054",
  abstract =	"Generalization is a very important issue in Machine
		 Learning. In this paper, we present a new idea for
		 improving Genetic Programming generalization ability.
		 The idea is based on a dynamic two-layered selection
		 algorithm and it is tested on a real-life drug
		 discovery regression application. The algorithm begins
		 using root mean squared error as fitness and the usual
		 tournament selection. A list of individuals called
		 ``repulsors'' is also kept in memory and initialized as
		 empty. As an individual is found to overfit the
		 training set, it is inserted into the list of
		 repulsors. When the list of repulsors is not empty,
		 selection becomes a two-layer algorithm: individuals
		 participating to the tournament are not randomly chosen
		 from the population but are themselves selected, using
		 the average dissimilarity to the repulsors as a
		 criterion to be maximized. Two kinds of
		 similarity/dissimilarity measures are tested for this
		 aim: the well known structural (or edit) distance and
		 the recently defined subtree crossover based similarity
		 measure. Although simple, this idea seems to improve
		 Genetic Programming generalization ability and the
		 presented experimental results show that Genetic
		 Programming generalizes better when subtree crossover
		 based similarity measure is used, at least for the test
		 problems studied in this paper.",
  notes =	"GECCO-2009 A joint meeting of the eighteenth
		 international conference on genetic algorithms
		 (ICGA-2009) and the fourteenth annual genetic
		 programming conference (GP-2009). ACM Order Number
		 910092.",
  doi-url =	"http://dx.doi.org/10.1145/1569901.1570054",
}

@InProceedings{1144159,
  author =	"Ashley George and Malcolm I. Heywood",
  title =	"Improving {GP} classifier generalization using a
		 cluster separation metric",
  booktitle =	"{GECCO 2006:} Proceedings of the 8th annual conference
		 on Genetic and evolutionary computation",
  year = 	"2006",
  NOeditor =	"Maarten Keijzer and Mike Cattolico and Dirk Arnold and
		 Vladan Babovic and Christian Blum and Peter Bosman and
		 Martin V. Butz and Carlos {Coello Coello} and Dipankar
		 Dasgupta and Sevan G. Ficici and James Foster and
		 Arturo Hernandez-Aguirre and Greg Hornby and Hod Lipson
		 and Phil McMinn and Jason Moore and Guenther Raidl and
		 Franz Rothlauf and Conor Ryan and Dirk Thierens",
  volume =	"1",
  ISBN = 	"1-59593-186-4",
  pages =	"939--940",
  address =	"Seattle, Washington, USA",
  URL =  	"http://www.cs.bham.ac.uk/~wbl/biblio/gecco2006/docs/p939.pdf",
  doi =  	"doi:10.1145/1143997.1144159",
  publisher =	"ACM Press",
  publisher_address = "New York, NY, 10286-1405, USA",
  month =	"8-12 " # jul,
  organisation = "ACM SIGEVO (formerly ISGEC)",
  keywords =	"genetic algorithms, genetic programming: Poster,
		 classification, clustering, evaluation",
  notes =	"GECCO-2006 A joint meeting of the fifteenth
		 international conference on genetic algorithms
		 (ICGA-2006) and the eleventh annual genetic programming
		 conference (GP-2006). ACM Order Number 910060",
  doi-url =	"http://dx.doi.org/10.1145/1143997.1144159",
}


@InProceedings{LaCava:2014:GPTP,
  author =	"William {La Cava} and Lee Spector",
  title =	"Inheritable Epigenetics in Genetic Programming",
  booktitle =	"Genetic Programming Theory and Practice XII",
  year = 	"2014",
  NOeditor =	"Rick Riolo and William P. Worzel and Mark Kotanchek",
  series =	"Genetic and Evolutionary Computation",
  pages =	"37--51",
  address =	"Ann Arbor, USA",
  month =	"8-10 " # may,
  publisher =	"Springer",
  keywords =	"genetic algorithms, genetic programming, Epigenetics,
		 Symbolic regression",
  isbn13 =	"978-3-319-16029-0",
  doi =  	"doi:10.1007/978-3-319-16030-6_3",
  abstract =	"Classical genetic programming solves problems by
		 applying the Darwinian concepts of selection, survival
		 and reproduction to a population of computer programs.
		 Here we extend the biological analogy to incorporate
		 epigenetic regulation through both learning and
		 evolution. We begin the chapter with a discussion of
		 Darwinian, Lamarckian, and Baldwinian approaches to
		 evolutionary computation and describe how recent
		 findings in biology differ conceptually from the
		 computational strategies that have been proposed. Using
		 inheritable Lamarckian mechanisms as inspiration, we
		 propose a system that allows for updating of
		 individuals in the population during their lifetime
		 while simultaneously preserving both genotypic and
		 phenotypic traits during reproduction. The
		 implementation is made simple through the use of
		 syntax-free, developmental, linear genetic programming.
		 The representation allows for arbitrarily-ordered
		 genomes to be syntactically valid programs, thereby
		 creating a genetic programming approach upon which
		 quasi-uniform epigenetic updating and inheritance can
		 easily be applied. Generational updates are made using
		 an epigenetic hill climber (EHC), and the epigenetic
		 properties of genes are inherited during crossover and
		 mutation. The addition of epigenetics results in faster
		 convergence, less bloat, and an improved ability to
		 find exact solutions on a number of symbolic regression
		 problems.",
  notes =	"http://cscs.umich.edu/gptp-workshops/ Part of
		 \cite{Riolo:2014:GPTP} published after the workshop in
		 2015",
  doi-url =	"http://dx.doi.org/10.1007/978-3-319-16030-6_3",
}

@InProceedings{rosca:1996:gVsGP,
  author =	"Justinian Rosca",
  title =	"Generality Versus Size in Genetic Programming",
  booktitle =	"Genetic Programming 1996: Proceedings of the First
		 Annual Conference",
  NOeditor =	"John R. Koza and David E. Goldberg and David B. Fogel
		 and Rick L. Riolo",
  year = 	"1996",
  month =	"28--31 " # jul,
  keywords =	"genetic algorithms, genetic programming",
  pages =	"381--387",
  address =	"Stanford University, CA, USA",
  publisher =	"MIT Press",
  URL =  	"ftp://ftp.cs.rochester.edu/pub/u/rosca/gp/96.gp.ps.gz",
  size = 	"6 pages",
  abstract =	"Genetic Programming (GP) uses variable size
		 representations as programs. Size becomes an important
		 and interesting emergent property of the structures
		 evolved by GP. The size of programs can be both a
		 controlling and a controlled factor in GP search. Size
		 influences the efficiency of the search process and is
		 related to the generality of solutions. This paper
		 analyzes the size and generality issues in standard GP
		 and GP using subroutines and addresses the question
		 whether such an analysis can help control the search
		 process. We relate the size, generalization and
		 modularity issues for programs evolved to control an
		 agent in a dynamic and non-deterministic environment,
		 as exemplified by the Pac-Man game.",
  URL =  	"http://cognet.mit.edu/sites/default/files/books/9780262315876/pdfs/9780262315876_chap52.pdf",
  URL =  	"http://cognet.mit.edu/library/books/view?isbn=0262611279",
  notes =	"GP-96",
}

@InProceedings{1144156,
  author =	"Phillip Wong and Mengjie Zhang",
  title =	"Algebraic simplification of {GP} programs during
		 evolution",
  booktitle =	"{GECCO 2006:} Proceedings of the 8th annual conference
		 on Genetic and evolutionary computation",
  year = 	"2006",
  NOeditor =	"Maarten Keijzer and Mike Cattolico and Dirk Arnold and
		 Vladan Babovic and Christian Blum and Peter Bosman and
		 Martin V. Butz and Carlos {Coello Coello} and Dipankar
		 Dasgupta and Sevan G. Ficici and James Foster and
		 Arturo Hernandez-Aguirre and Greg Hornby and Hod Lipson
		 and Phil McMinn and Jason Moore and Guenther Raidl and
		 Franz Rothlauf and Conor Ryan and Dirk Thierens",
  volume =	"1",
  ISBN = 	"1-59593-186-4",
  pages =	"927--934",
  address =	"Seattle, Washington, USA",
  URL =  	"http://www.cs.bham.ac.uk/~wbl/biblio/gecco2006/docs/p927.pdf",
  doi =  	"doi:10.1145/1143997.1144156",
  publisher =	"ACM Press",
  publisher_address = "New York, NY, 10286-1405, USA",
  month =	"8-12 " # jul,
  organisation = "ACM SIGEVO (formerly ISGEC)",
  keywords =	"genetic algorithms, genetic programming, algebraic
		 simplification, code bloating, online simplification,
		 program simplification",
  notes =	"GECCO-2006 A joint meeting of the fifteenth
		 international conference on genetic algorithms
		 (ICGA-2006) and the eleventh annual genetic programming
		 conference (GP-2006). ACM Order Number 910060",
  doi-url =	"http://dx.doi.org/10.1145/1143997.1144156",
}

@Article{Brameier:2001:TEC,
  author =	"Markus Brameier and Wolfgang Banzhaf",
  title =	"A Comparison of Linear Genetic Programming and Neural
		 Networks in Medical Data Mining",
  journal =	"IEEE Transactions on Evolutionary Computation",
  year = 	"2001",
  volume =	"5",
  number =	"1",
  pages =	"17--26",
  month =	feb,
  keywords =	"genetic algorithms, genetic programming, Data mining,
		 evolutionary computation, neural networks",
  URL =  	"http://web.cs.mun.ca/~banzhaf/papers/ieee_taec.pdf",
  size = 	"10 pages",
  abstract =	"We apply linear genetic programming to several
		 diagnosis problems in medicine. An efficient algorithm
		 is presented that eliminates intron code in linear
		 genetic programs. This results in a significant speedup
		 which is especially interesting when operating with
		 complex datasets as they are occuring in real-world
		 applications like medicine. We compare our results to
		 those obtained with neural networks and argue that
		 genetic programming is able to show similar performance
		 in classification and generalization even within a
		 relatively small number of generations.",
  notes =	"proben1/UCI LGP variable length string of C
		 instruction. Branching. steady state tournament
		 selection. two-point string crossover {"}high mutation
		 rates have been experienced to produced better
		 results{"} p19. Size<=256 {"}it is much easier for the
		 GP system to implement structural introns [than
		 semantic ones]{"} p20 {"}for all problems discussed,
		 the performance of GP in generalization comes close to
		 or even better then the results documented for NNs{"}
		 (MLP, RPROP) p21 Ten demes of 500 connected in one
		 direction circle. 5% mutation rate. {"}On average, the
		 number of effective generations is reduced by a factor
		 of three when using demes. Tests with and without
		 conditionals. Runtime comparison. Intron removal (dead
		 code) at run time.",
}

@InProceedings{hooper:1996:iarGPes,
  author =	"Dale Hooper and Nicholas S. Flann",
  title =	"Improving the Accuracy and Robustness of Genetic
		 Programming through Expression Simplification",
  booktitle =	"Genetic Programming 1996: Proceedings of the First
		 Annual Conference",
  NOeditor =	"John R. Koza and David E. Goldberg and David B. Fogel
		 and Rick L. Riolo",
  year = 	"1996",
  month =	"28--31 " # jul,
  keywords =	"genetic algorithms, genetic programming",
  pages =	"428",
  address =	"Stanford University, CA, USA",
  publisher =	"MIT Press",
  ISBN = 	"0-262-61127-9",
  URL =  	"http://digital.cs.usu.edu/~flann/gp.pdf",
  URL =  	"http://cognet.mit.edu/sites/default/files/books/9780262315876/pdfs/9780262315876_chap67.pdf",
  URL =  	"http://cognet.mit.edu/library/books/view?isbn=0262611279",
  size = 	"1 page",
  notes =	"GP-96. Occam's razor, bloat, introns, 200 edit rules",
}

@InProceedings{ekart:1999:EA,
  author =	"Aniko Ekart",
  title =	"Shorter Fitness Preserving Genetic Programs",
  booktitle =	"Artificial Evolution. 4th European Conference, AE'99,
		 Selected Papers",
  year = 	"2000",
  editor =	"C. Fonlupt and J.-K. Hao and E. Lutton and E. Ronald
		 and M. Schoenauer",
  volume =	"1829",
  series =	"LNCS",
  pages =	"73--83",
  address =	"Dunkerque, France",
  month =	"3-5 " # nov,
  keywords =	"genetic algorithms, genetic programming",
  ISBN = 	"3-540-67846-8",
  URL =  	"http://www.sztaki.hu/~ekart/ea.ps",
  URL =  	"http://citeseer.ist.psu.edu/496596.html",
  notes =	"http://www.springer.de/cgi-bin/search_book.pl?isbn=3-540-67846-8
		 {"}Simplification is implemented in Prolog and consists
		 of approximately 250 clauses.{"} Fig 4. plots of
		 fitness (RMS error) times program size",
}

@InProceedings{conf/ppsn/MoraglioKJ12,
  author =	"Alberto Moraglio and Krzysztof Krawiec and Colin G.
		 Johnson",
  title =	"Geometric Semantic Genetic Programming",
  booktitle =	"Parallel Problem Solving from Nature, PPSN XII (part
		 1)",
  year = 	"2012",
  NOeditor =	"Carlos A. {Coello Coello} and Vincenzo Cutello and
		 Kalyanmoy Deb and Stephanie Forrest and Giuseppe
		 Nicosia and Mario Pavone",
  volume =	"7491",
  series =	"Lecture Notes in Computer Science",
  pages =	"21--31",
  address =	"Taormina, Italy",
  month =	sep # " 1-5",
  publisher =	"Springer",
  keywords =	"genetic algorithms, genetic programming",
  isbn13 =	"978-3-642-32936-4",
  doi =  	"doi:10.1007/978-3-642-32937-1_3",
  size = 	"11 pages",
  abstract =	"Traditional Genetic Programming (GP) searches the
		 space of functions/programs by using search operators
		 that manipulate their syntactic representation,
		 regardless of their actual semantics/behaviour.
		 Recently, semantically aware search operators have been
		 shown to outperform purely syntactic operators. In this
		 work, using a formal geometric view on search operators
		 and representations, we bring the semantic approach to
		 its extreme consequences and introduce a novel form of
		 GP, Geometric Semantic GP (GSGP), that searches
		 directly the space of the underlying semantics of the
		 programs. This perspective provides new insights on the
		 relation between program syntax and semantics, search
		 operators and fitness landscape, and allows for
		 principled formal design of semantic search operators
		 for different classes of problems. We derive specific
		 forms of GSGP for a number of classic GP domains and
		 experimentally demonstrate their superiority to
		 conventional operators.",
  bibsource =	"DBLP, http://dblp.uni-trier.de",
  affiliation =  "School of Computer Science, University of Birmingham,
		 UK",
  doi-url =	"http://dx.doi.org/10.1007/978-3-642-32937-1_3",
}

@book{domingos2016master,
  title={Master Algorithm},
  author={Domingos, Pedro},
  year={2016},
  publisher={Penguin Books}
}

@InProceedings{goncalves:2013:EuroGP,
  author =	"Ivo Goncalves and Sara Silva",
  title =	"Balancing Learning and Overfitting in Genetic
		 Programming with Interleaved Sampling of Training
		 data",
  booktitle =	"Proceedings of the 16th European Conference on Genetic
		 Programming, EuroGP 2013",
  year = 	"2013",
  month =	"3-5 " # apr,
  NOeditor =	"Krzysztof Krawiec and Alberto Moraglio and Ting Hu and
		 A. Sima Uyar and Bin Hu",
  series =	"LNCS",
  volume =	"7831",
  publisher =	"Springer Verlag",
  address =	"Vienna, Austria",
  pages =	"73--84",
  organisation = "EvoStar",
  keywords =	"genetic algorithms, genetic programming, Overfitting,
		 Generalisation, Pharmacokinetics, Drug Discovery",
  isbn13 =	"978-3-642-37206-3",
  doi =  	"doi:10.1007/978-3-642-37207-0_7",
  abstract =	"Generalisation is the ability of a model to perform
		 well on cases not seen during the training phase. In
		 Genetic Programming generalization has recently been
		 recognised as an important open issue, and increased
		 efforts are being made towards evolving models that do
		 not overfit. In this work we expand on recent
		 developments that showed that using a small and
		 frequently changing subset of the training data is
		 effective in reducing over fitting and improving
		 generalisation. Particularly, we build upon the idea of
		 randomly choosing a single training instance at each
		 generation and balance it with periodically using all
		 training data. The motivation for this approach is
		 based on trying to keep overfitting low (represented by
		 using a single training instance) and still presenting
		 enough information so that a general pattern can be
		 found (represented by using all training data). We
		 propose two approaches called interleaved sampling and
		 random interleaved sampling that respectively represent
		 doing this balancing in a deterministic or a
		 probabilistic way. Experiments are conducted on three
		 high-dimensional real-life datasets on the
		 pharmacokinetics domain. Results show that most of the
		 variants of the proposed approaches are able to
		 consistently improve generalisation and reduce over
		 fitting when compared to standard Genetic Programming.
		 The best variants are even able of such improvements on
		 a dataset where a recent and representative
		 state-of-the-art method could not. Furthermore, the
		 resulting models are short and hence easier to
		 interpret, an important achievement from the
		 applications' point of view.",
  notes =	"Part of \cite{Krawiec:2013:GP} EuroGP'2013 held in
		 conjunction with EvoCOP2013, EvoBIO2013, EvoMusArt2013
		 and EvoApplications2013",
  doi-url =	"http://dx.doi.org/10.1007/978-3-642-37207-0_7",
}

@InProceedings{conf/ppsn/Agapitos12,
  author =	"Alexandros Agapitos and Anthony Brabazon and Michael
		 O'Neill",
  title =	"Controlling Overfitting in Symbolic Regression Based
		 on a Bias/Variance Error Decomposition",
  booktitle =	"Parallel Problem Solving from Nature, PPSN XII (part
		 1)",
  year = 	"2012",
  NOeditor =	"Carlos A. {Coello Coello} and Vincenzo Cutello and
		 Kalyanmoy Deb and Stephanie Forrest and Giuseppe
		 Nicosia and Mario Pavone",
  volume =	"7491",
  series =	"Lecture Notes in Computer Science",
  pages =	"438--447",
  address =	"Taormina, Italy",
  month =	sep # " 1-5",
  publisher =	"Springer",
  keywords =	"genetic algorithms, genetic programming",
  isbn13 =	"978-3-642-32936-4",
  doi =  	"doi:10.1007/978-3-642-32937-1_44",
  size = 	"10 pages",
  abstract =	"We consider the fundamental property of generalisation
		 of data-driven models evolved by means of Genetic
		 Programming (GP). The statistical treatment of
		 decomposing the regression error into bias and variance
		 terms provides insight into the generalisation
		 capability of this modelling method. The error
		 decomposition is used as a source of inspiration to
		 design a fitness function that relaxes the sensitivity
		 of an evolved model to a particular training dataset.
		 Results on eight symbolic regression problems show that
		 new method is capable on inducing better-generalising
		 models than standard GP for most of the problems.",
  affiliation =  "Natural Computing Research and Applications Group,
		 University College Dublin, Ireland",
  doi-url =	"http://dx.doi.org/10.1007/978-3-642-32937-1_44",
}

@InProceedings{Azad:2011:GECCO,
  author =	"R. Muhammad Atif Azad and Conor Ryan",
  title =	"Variance based selection to improve test set
		 performance in genetic programming",
  booktitle =	"GECCO '11: Proceedings of the 13th annual conference
		 on Genetic and evolutionary computation",
  year = 	"2011",
  NOeditor =	"Natalio Krasnogor and Pier Luca Lanzi and Andries
		 Engelbrecht and David Pelta and Carlos Gershenson and
		 Giovanni Squillero and Alex Freitas and Marylyn Ritchie
		 and Mike Preuss and Christian Gagne and Yew Soon Ong
		 and Guenther Raidl and Marcus Gallager and Jose Lozano
		 and Carlos Coello-Coello and Dario Landa Silva and
		 Nikolaus Hansen and Silja Meyer-Nieberg and Jim Smith
		 and Gus Eiben and Ester Bernado-Mansilla and Will
		 Browne and Lee Spector and Tina Yu and Jeff Clune and
		 Greg Hornby and Man-Leung Wong and Pierre Collet and
		 Steve Gustafson and Jean-Paul Watson and Moshe Sipper
		 and Simon Poulding and Gabriela Ochoa and Marc
		 Schoenauer and Carsten Witt and Anne Auger",
  isbn13 =	"978-1-4503-0557-0",
  pages =	"1315--1322",
  keywords =	"genetic algorithms, genetic programming",
  month =	"12-16 " # jul,
  organisation = "SIGEVO",
  address =	"Dublin, Ireland",
  doi =  	"doi:10.1145/2001576.2001754",
  publisher =	"ACM",
  publisher_address = "New York, NY, USA",
  abstract =	"This paper proposes to improve the performance of
		 Genetic Programming (GP) over unseen data by minimizing
		 the variance of the output values of evolving models
		 alongwith reducing error on the training data. Variance
		 is a well understood, simple and inexpensive
		 statistical measure; it is easy to integrate into a GP
		 implementation and can be computed over arbitrary input
		 values even when the target output is not known.
		 Moreover, we propose a simple variance based selection
		 scheme to decide between two models (individuals). The
		 scheme is simple because, although it uses bi-objective
		 criteria to differentiate between two competing models,
		 it does not rely on a multi-objective optimisation
		 algorithm. In fact, standard multi-objective algorithms
		 can also employ this scheme to identify good trade-offs
		 such as those located around the knee of the Pareto
		 Front. The results indicate that, despite some
		 limitations, these proposals significantly improve the
		 performance of GP over a selection of high dimensional
		 (multi-variate) problems from the domain of symbolic
		 regression. This improvement is manifested by superior
		 results over test sets in three out of four problems,
		 and by the fact that performance over the test sets
		 does not degrade as often witnessed with standard GP;
		 neither is this performance ever inferior to that on
		 the training set. As with some earlier studies, these
		 results do not find a link between expressions of small
		 sizes and their ability to generalise to unseen data.",
  notes =	"Also known as \cite{2001754} GECCO-2011 A joint
		 meeting of the twentieth international conference on
		 genetic algorithms (ICGA-2011) and the sixteenth annual
		 genetic programming conference (GP-2011)",
  doi-url =	"http://dx.doi.org/10.1145/2001576.2001754",
}
